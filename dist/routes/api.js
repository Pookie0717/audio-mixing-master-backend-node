"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const multer_1 = __importDefault(require("multer"));
const AuthController_1 = require("../controllers/AuthController");
const ServiceController_1 = require("../controllers/ServiceController");
const CategoryController_1 = require("../controllers/CategoryController");
const OrderController_1 = require("../controllers/OrderController");
const CartController_1 = require("../controllers/CartController");
const PaymentController_1 = require("../controllers/PaymentController");
const auth_1 = require("../middleware/auth");
const SampleAudioController_1 = require("../controllers/SampleAudioController");
const GalleryController_1 = require("../controllers/GalleryController");
const FaqController_1 = require("../controllers/FaqController");
const TestimonialController_1 = require("../controllers/TestimonialController");
const UploadLeadController_1 = require("../controllers/UploadLeadController");
const ContactLeadController_1 = require("../controllers/ContactLeadController");
const router = (0, express_1.Router)();
router.post('/auth/register', AuthController_1.AuthController.register);
router.post('/auth/login', AuthController_1.AuthController.login);
router.get('/auth/verify-email/:id/:hash', (_req, _res) => { });
router.post('/auth/forgot-password', AuthController_1.AuthController.forgotPassword);
router.post('/auth/reset-password', AuthController_1.AuthController.resetPassword);
router.get('/auth/me', auth_1.auth, AuthController_1.AuthController.getCurrentUser);
router.get('/my-favourites', auth_1.auth, AuthController_1.AuthController.getFavourites);
router.post('/my-favourites', auth_1.auth, AuthController_1.AuthController.addFavourite);
router.delete('/my-favourites/:service_id', auth_1.auth, AuthController_1.AuthController.removeFavourite);
router.get('/my-favourites/:service_id/check', auth_1.auth, AuthController_1.AuthController.checkFavourite);
router.get('/my-favourites/count', auth_1.auth, AuthController_1.AuthController.getFavouriteCount);
router.get('/sample-audios', SampleAudioController_1.SampleAudioController.index);
router.get('/sample-audios/:id', (_req, _res) => { });
router.get('/gallary', GalleryController_1.GalleryController.index);
router.get('/gallary/:id', GalleryController_1.GalleryController.show);
router.get('/categories', CategoryController_1.CategoryController.index);
router.get('/categories/with-count', CategoryController_1.CategoryController.getWithServices);
router.get('/tags', (_req, _res) => { });
router.get('/services', ServiceController_1.ServiceController.index);
router.get('/services/:tag', ServiceController_1.ServiceController.show);
router.get('/services/search', ServiceController_1.ServiceController.search);
router.get('/services/category/:categoryId', ServiceController_1.ServiceController.getByCategory);
router.get('/service-details/:id', ServiceController_1.ServiceController.getServiceDetails);
router.get('/services-list', (_req, _res) => { });
router.get('/my-gifts', (_req, _res) => { });
router.get('/my-gifts/:id', (_req, _res) => { });
router.get('/lead/generation', (_req, _res) => { });
router.get('/lead/generation/:id', (_req, _res) => { });
router.post('/lead/generation', (_req, _res) => { });
router.delete('/lead/generation/:id', (_req, _res) => { });
router.get('/upload/lead/gen', UploadLeadController_1.UploadLeadController.index);
router.get('/upload/lead/gen/:id', UploadLeadController_1.UploadLeadController.show);
const upload = (0, multer_1.default)();
router.post('/upload/lead/gen', upload.none(), UploadLeadController_1.UploadLeadController.store);
router.delete('/upload/lead/gen/:id', UploadLeadController_1.UploadLeadController.destroy);
router.get('/download/zip/lead/:id', UploadLeadController_1.UploadLeadController.downloadZip);
router.post('/download-audio/:id', UploadLeadController_1.UploadLeadController.downloadAudio);
router.get('/export/lead', (_req, _res) => { });
router.get('/contact/lead/generation', ContactLeadController_1.ContactLeadController.index);
router.get('/contact/lead/generation/:id', ContactLeadController_1.ContactLeadController.show);
router.post('/contact/lead/generation', ContactLeadController_1.ContactLeadController.store);
router.delete('/contact/lead/generation/:id', ContactLeadController_1.ContactLeadController.destroy);
router.get('/promo-codes', (_req, _res) => { });
router.get('/promo-codes/:id', (_req, _res) => { });
router.put('/promo-codes/:id', (_req, _res) => { });
router.delete('/promo-codes/:id', (_req, _res) => { });
router.post('/insert-service-promo-codes', (_req, _res) => { });
router.get('/my-promo-codes/verify/:code', (_req, _res) => { });
router.get('/faq-list', FaqController_1.FaqController.FaqList);
router.get('/testimonial-list', TestimonialController_1.TestimonialController.TestimonialList);
router.post('/buy-revision', (_req, _res) => { });
router.post('/order/update-status/:id', (_req, _res) => { });
router.get('/generate-pdf', (_req, _res) => { });
router.get('/orders', auth_1.auth, OrderController_1.OrderController.index);
router.get('/orders/:id', auth_1.auth, OrderController_1.OrderController.show);
router.post('/orders', auth_1.auth, OrderController_1.OrderController.create);
router.put('/orders/:id/status', auth_1.auth, OrderController_1.OrderController.updateStatus);
router.get('/cart', auth_1.auth, CartController_1.CartController.index);
router.post('/cart', auth_1.auth, CartController_1.CartController.add);
router.put('/cart/:serviceId', auth_1.auth, CartController_1.CartController.update);
router.delete('/cart/:serviceId', auth_1.auth, CartController_1.CartController.remove);
router.post('/stripe/pay', auth_1.auth, PaymentController_1.PaymentController.stripePay);
router.post('/stripe/pay/guest', PaymentController_1.PaymentController.stripePay);
router.post('/stripe/intent', auth_1.auth, PaymentController_1.PaymentController.createPaymentIntent);
router.post('/stripe/intent/guest', PaymentController_1.PaymentController.createPaymentIntent);
router.post('/stripe/subscribe', auth_1.auth, PaymentController_1.PaymentController.stripeSubscribe);
router.post('/stripe/subscribe/guest', PaymentController_1.PaymentController.stripeSubscribe);
router.post('/paypal', auth_1.optionalAuth, PaymentController_1.PaymentController.paypal);
router.post('/create-subscription', auth_1.auth, PaymentController_1.PaymentController.createSubscription);
router.get('/fetch/order', auth_1.auth, PaymentController_1.PaymentController.getOrderDetails);
router.get('/order-details/:id', auth_1.auth, PaymentController_1.PaymentController.orderDetails);
router.get('/user-orders/:user_id', auth_1.auth, PaymentController_1.PaymentController.userOrders);
router.post('/success', auth_1.optionalAuth, PaymentController_1.PaymentController.success);
router.get('/cancel', auth_1.optionalAuth, PaymentController_1.PaymentController.cancel);
exports.default = router;
//# sourceMappingURL=api.js.map